import numpy as np

# 给定的频域数据（极坐标形式）
freq_data_polar = [
    (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
    (1.77783, -2.66072), (-0.313656, -3.18461), (-2.26275, -2.26275),
    (-3.18461, -0.313656), (-2.66072, 1.77783), (-0.928916, 3.06222),
    (1.22459, 2.95643), (2.82216, 1.50848), (3.13853, -0.624292),
    (2.03007, -2.47365), (1.27866e-09, -3.20002), (-2.03007, -2.47365),
    (-3.13853, -0.624292), (-2.82216, 1.50848), (-1.22459, 2.95643),
    (0.928915, 3.06222), (2.66072, 1.77783), (3.18461, -0.313656),
    (2.26275, -2.26275), (0.313656, -3.18461), (-1.77783, -2.66072),
    (-3.06222, -0.928915), (-2.95643, 1.22459), (-1.50848, 2.82216),
    (0.624292, 3.13853), (2.47365, 2.03007), (0, 0), (2.47365, -2.03007),
    (0.624292, -3.13853), (-1.50848, -2.82216), (-2.95643, -1.22459),
    (-3.06222, 0.928916), (-1.77783, 2.66072), (0.313656, 3.18461),
    (2.26275, 2.26275), (3.18461, 0.313656), (2.66072, -1.77783),
    (0.928915, -3.06222), (-1.22459, -2.95643), (-2.82216, -1.50848),
    (-3.13853, 0.624292), (-2.03007, 2.47365), (1.57084e-07, 3.20002),
    (2.03007, 2.47365), (3.13853, 0.624292), (2.82216, -1.50848),
    (1.22459, -2.95643), (-0.928915, -3.06222), (-2.66072, -1.77783),
    (-3.18461, 0.313656), (-2.26275, 2.26275), (-0.313657, 3.18461),
    (1.77783, 2.66072), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)
]

# 将极坐标形式的数据转换为复数形式
freq_data_complex = [magnitude * np.exp(1j * phase) for magnitude, phase in freq_data_polar]

# 使用numpy执行IFFT
time_domain_data = np.fft.ifft(freq_data_complex)

# 输出结果
print("Time domain data:", time_domain_data)