import numpy as np


def initialize_with_ifft(all_data, num_taps):
    # 对所有数据组进行IFFT初始化
    all_time_domain = []
    for data in all_data:
        time_domain = np.fft.ifft(data[:, 0])
        all_time_domain.append(time_domain)
    all_time_domain = np.stack(all_time_domain)
    avg_time_domain = np.mean(all_time_domain, axis=0)
    peak_indices = np.argsort(-np.abs(avg_time_domain))[:num_taps]
    t_initial = np.sort(peak_indices / len(all_data[0]))  # 归一化到[0,1)
    h_initial = avg_time_domain[peak_indices]
    return h_initial, t_initial


def em_algorithm(all_data, num_taps, max_iter=80, tol=1e-6):
    num_groups = len(all_data)
    num_subcarriers = all_data[0].shape[0]

    # 数据归一化
    all_y_normalized = []
    max_abs_list = []
    for data in all_data:
        y = data[:, 0]
        max_abs = np.max(np.abs(y)) + 1e-12
        y_normalized = y / max_abs
        all_y_normalized.append(y_normalized)
        max_abs_list.append(max_abs)

    h, t = initialize_with_ifft(all_data, num_taps)

    lr = 0.03  # 降低初始学习率

    H_prev = h.copy()
    for iter in range(max_iter):
        all_contributions = []
        all_residuals = []
        for y_normalized in all_y_normalized:
            contributions = np.zeros((num_subcarriers, num_taps), dtype=complex)
            for i in range(num_taps):
                freq = np.exp(-1j * 2 * np.pi * np.arange(num_subcarriers) * t[i])
                contributions[:, i] = h[i] * freq
            total_contribution = contributions.sum(axis=1)
            residual = y_normalized - total_contribution
            all_contributions.append(contributions)
            all_residuals.append(residual)

        # 更新h
        H_new = np.zeros(num_taps, dtype=complex)
        for i in range(num_taps):
            total_residual_i = 0
            total_freq_conj = 0
            for group in range(num_groups):
                contributions = all_contributions[group]
                mask = np.ones(num_taps, bool)
                mask[i] = False
                other_contrib = contributions[:, mask].sum(axis=1)
                residual_i = all_y_normalized[group] - other_contrib
                freq = np.exp(1j * 2 * np.pi * np.arange(num_subcarriers) * t[i])
                total_residual_i += residual_i
                total_freq_conj += freq.conj()
            H_new[i] = np.sum(total_residual_i * total_freq_conj) / (num_subcarriers * num_groups)
        h = H_new

        # 更新t（稳定版梯度下降）
        t_new = t.copy()
        for i in range(num_taps):
            if np.abs(h[i]) < 1e-8:  # 忽略弱路径
                continue
            grad = 0.0
            for group in range(num_groups):
                y_normalized = all_y_normalized[group]
                residual = all_residuals[group]
                for k in range(num_subcarriers):
                    phase_arg = 2 * np.pi * k * t[i]
                    cos_term = np.cos(phase_arg)
                    sin_term = np.sin(phase_arg)
                    real_part = residual[k].real * cos_term + residual[k].imag * sin_term
                    imag_part = -residual[k].real * sin_term + residual[k].imag * cos_term
                    term = 2 * np.pi * k * (real_part * h[i].real + imag_part * h[i].imag)
                    grad += np.clip(term, -1e6, 1e5)  # 梯度裁剪
            effective_lr = lr / (1 + 0.05 * iter)  # 学习率衰减
            delta = effective_lr * grad / (num_subcarriers * num_groups)
            t_new[i] = t[i] - delta
        t = np.clip(t_new, 0, 0.999)  # 严格约束范围
        t = np.sort(t)  # 保持时间顺序

        # 收敛检查
        if iter > 20 and np.max(np.abs(h - H_prev)) < tol:
            break
        H_prev = h.copy()

    # 恢复原始尺度
    h = h * np.mean(max_abs_list)
    return h, t


# 假设输入数据是一个大的列表，包含多个组，每组64个子载波
all_data = [
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.407845, 4.082422), (4.014088, 3.004378), (10.602316, -4.284601), (2.320276, -3.616815), (-1.114925, -7.139877), (-0.954480, -2.376929), (-7.162391, 2.594994), (-3.289485, 7.718773), (3.773490, 6.471739), (6.096123, 1.899204), (5.499163, -1.751755), (0.849766, -2.204436), (-0.677962, -3.861882), (-14.277596, -4.462277), (-7.979001, 1.678429), (-0.981183, 5.036925), (1.026999, 3.031790), (6.426892, 3.384058), (11.416090, -5.960452), (-0.257621, -5.535560), (-1.967637, -5.114631), (-7.170825, -3.117266), (-7.423131, 3.403350), (-2.735023, 5.837963), (2.744296, 3.822786), (4.741892, 3.233120), (0.000000, 0.000000), (1.383814, -8.784586), (-2.447885, -6.603639), (-8.369374, -2.947669), (-7.069901, 3.175249), (-3.816792, 4.697056), (2.644261, 6.140457), (6.719226, -1.931009), (6.881330, -3.350366), (3.227600, -3.683879), (-4.737039, -4.615370), (-3.007192, -0.175310), (-1.654852, -0.179895), (0.344973, 3.122655), (1.086329, 4.549740), (3.428270, 2.289448), (1.249043, -0.284607), (0.365450, -5.273841), (-3.966265, -3.385479), (-4.674198, 0.621399), (-5.794177, 5.469763), (0.343149, 4.384173), (2.079968, 5.040246), (4.480678, -0.957384), (-0.254730, -2.683819), (1.040562, -2.666174), (-3.567689, -1.540266), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (-8.097754, 1.376155), (-3.510232, 2.567855), (2.288605, 10.455429), (3.055874, 3.084967), (6.042990, -1.081506), (2.739577, -0.830385), (-1.985527, -9.353421), (-7.176399, -3.406033), (-7.443576, 0.137597), (-3.053854, 4.702940), (2.787637, 3.604236), (3.215640, 2.647967), (3.842637, -1.424683), (4.235678, -6.440058), (-2.442795, -7.183108), (-3.663235, -2.625823), (-5.147391, 3.948605), (-5.433411, 11.048642), (3.726576, 8.296859), (5.482227, 0.241377), (6.153845, -2.364485), (1.143834, -6.527600), (-1.862252, -5.070584), (-7.092742, -1.720987), (-3.637824, 2.918155), (-3.792636, 7.498147), (0.000000, 0.000000), (1.730902, 2.821868), (9.474378, -6.320644), (2.434913, -11.365214), (-4.257691, -7.769053), (-6.751787, -2.886895), (-3.221125, 1.535628), (0.991834, 6.833742), (3.783876, 7.608405), (7.433539, 1.371405), (3.591478, -1.386046), (-0.141212, -2.631595), (-1.654592, -0.797792), (-1.221230, 2.260608), (-2.936032, 1.120678), (-2.898262, 5.033156), (4.301390, 6.152434), (5.879400, 0.741321), (1.021682, -0.443180), (1.053167, -3.545872), (-2.038405, -3.053873), (-4.229783, -0.085388), (-3.707831, 4.220292), (-1.231560, 4.546891), (2.322666, 1.829025), (2.775810, 0.049574), (2.079092, -1.088105), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (-0.704402, -5.662627), (-1.790955, -0.049195), (-9.694793, 2.448999), (-2.315897, 5.103513), (1.007986, 6.502104), (0.853330, 2.471430), (2.766929, -2.222241), (5.176397, -8.059201), (-0.173906, -7.732266), (-3.738453, -3.189083), (-7.463548, 2.091270), (-1.390365, 1.581827), (1.514919, 3.064972), (9.628608, 5.290894), (3.927109, -1.316942), (1.464799, -4.067282), (-2.299522, -8.840732), (-11.350558, -6.235073), (-10.077860, 1.663389), (-0.321506, 5.481086), (2.378016, 7.050070), (3.911603, 2.328717), (2.532932, -2.217782), (1.525011, -7.953297), (-2.451911, -3.585191), (-7.347487, -1.962179), (0.000000, 0.000000), (-4.548593, 8.194358), (2.421524, 4.643125), (4.866636, 1.267781), (6.790350, -2.611241), (2.105953, -7.167416), (-2.214555, -8.054501), (-6.779926, 1.418374), (-7.122698, 3.831383), (-0.104873, 7.446944), (1.684146, 5.268875), (6.217278, 0.842525), (2.379753, -2.232061), (-0.419113, -1.787390), (-1.535246, -2.631710), (-4.130533, -2.545471), (-4.257875, 1.767488), (-1.326663, 4.045141), (0.779296, 2.736319), (6.925214, 3.567090), (5.444922, -2.263326), (0.227287, -4.397873), (-4.512689, -5.185324), (-2.538953, 0.749749), (-1.622172, 0.622470), (0.483684, 2.882578), (2.845966, 1.390596), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (7.201354, 4.213335), (7.196018, -2.589945), (5.432011, -13.137761), (-2.722875, -6.913155), (-5.500750, -4.028433), (-2.435718, -0.778042), (-1.352966, 9.224734), (2.697367, 5.641242), (5.454648, 2.996875), (5.111868, -2.889031), (1.640455, -3.103754), (-2.057982, -4.511129), (-5.644073, -0.897505), (-2.767730, 1.795063), (-1.016735, 3.998781), (6.012923, 10.757964), (6.518017, 2.261372), (5.767557, -2.877136), (2.832100, -8.606063), (-4.598314, -3.251776), (-6.234882, 0.354413), (-7.081993, 5.656694), (-0.722202, 6.408915), (5.686115, 5.274381), (6.187773, 0.332044), (5.258820, -5.392730), (0.000000, 0.000000), (-2.878400, -4.730124), (-5.341249, -2.205183), (-4.943366, 1.540902), (-0.572552, 6.780281), (1.848973, 3.150888), (7.656054, -0.280696), (2.650479, -6.445966), (-0.034833, -7.080756), (-1.975792, -1.220242), (-4.538655, 0.199780), (-2.197356, 3.836947), (-0.842855, 1.853480), (2.119257, 1.796879), (0.231458, -2.081625), (2.850996, -4.175807), (3.248595, -2.173945), (-4.796553, -4.267629), (-4.057283, -0.858647), (-3.913520, 4.307941), (1.107079, 4.897689), (3.570245, 2.483782), (3.310890, 0.768368), (2.231577, -3.131764), (-0.917212, -3.035833), (-2.575939, -1.398935), (-1.996444, -1.445434), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (-7.068727, 4.927693), (-0.119315, 5.695044), (6.142313, 9.134467), (5.916021, 0.124936), (6.322202, -5.194169), (1.607229, -1.958321), (-4.513912, -2.756865), (-7.939841, -1.004646), (-4.679485, 6.458133), (0.573953, 8.742171), (0.932623, 0.853878), (6.299055, -0.489328), (4.286708, -4.253999), (-0.020741, -8.007607), (-5.372728, -4.145646), (-10.189605, 1.226046), (-3.493604, 3.602858), (1.332735, 8.303173), (7.591623, 8.203949), (4.795479, -2.520273), (5.438657, -6.732430), (-2.352728, -7.663606), (-8.324200, -5.239193), (-5.937210, 1.899440), (-2.696660, 4.437154), (0.757474, 4.619812), (0.000000, 0.000000), (4.441492, -0.528794), (4.322212, -4.921100), (-1.673178, -2.286723), (-6.063903, -3.274970), (-4.004762, 1.002232), (-6.332331, 6.669479), (4.781515, 5.103184), (6.122914, 3.186187), (3.261108, -0.087964), (1.216599, -2.019285), (-2.093462, -4.771386), (-0.258124, -1.247424), (-3.641259, 0.723542), (-3.733660, 2.467171), (0.184220, 2.301586), (1.391893, -1.440478), (3.337806, -1.464018), (-0.419700, -4.965210), (-1.729704, -2.263371), (-5.911439, -1.907655), (-3.789902, 2.195653), (-1.328999, 3.661800), (-0.145631, 3.039146), (4.799132, -0.782820), (2.305156, -0.214583), (2.314141, -2.856692), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (-2.464936, -3.987396), (-5.336536, -0.884463), (-8.885429, 7.290172), (-0.961946, 6.306859), (4.128276, 7.277347), (1.773524, 1.866783), (6.541215, -6.588423), (0.619416, -4.781540), (-3.856908, -6.698279), (-3.204863, -0.814929), (-2.567473, 1.562292), (0.136416, 0.673722), (5.297163, 5.558226), (5.802099, -1.026325), (4.925479, -4.873038), (0.027309, -8.297628), (-4.100881, -6.377381), (-10.718032, 0.329468), (-10.109844, 8.469212), (1.871386, 5.215259), (7.766130, 5.007082), (5.192513, 1.708932), (2.714326, -5.213994), (-3.196880, -9.917032), (-6.356483, -6.004273), (-7.031410, 1.267582), (0.000000, 0.000000), (0.305116, 8.078420), (3.962991, 1.506742), (-0.653003, -2.282616), (2.129108, -3.719761), (-0.867229, -8.597786), (-5.632077, -4.726783), (-5.619120, 4.082781), (-3.919944, 4.819638), (2.873358, 6.128273), (1.669774, 3.488718), (1.332790, -1.562429), (2.474310, -2.299238), (-1.900647, -3.340938), (-3.369417, -2.320819), (-6.067378, 2.036573), (-3.878827, 6.419210), (0.230313, 5.405926), (-0.442231, 3.713392), (5.280531, 0.149331), (3.001494, -1.815197), (-1.525022, -3.870798), (-2.185205, -0.931373), (-2.176425, 2.986751), (-0.131975, 0.792029), (0.868388, 2.779442), (3.112457, 2.119902), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (7.823702, -4.315961), (0.858478, -3.409564), (-5.118152, -9.053759), (-3.968859, -1.286205), (-8.311230, 4.681169), (-2.113873, 1.463758), (3.485228, 5.973392), (8.073743, 0.654642), (7.042346, -5.937833), (2.058762, -5.820557), (-4.925468, -4.967276), (-4.340560, 0.401235), (-6.537090, 4.359863), (-1.241323, 3.492080), (4.559222, 6.612514), (5.278166, 1.054294), (4.368043, -2.436827), (1.760918, -11.622367), (-4.288453, -9.430978), (-5.354727, 1.542469), (-5.163434, 6.914124), (-1.354709, 6.065659), (3.067396, 2.994566), (4.415915, 1.397539), (3.502134, -5.474153), (2.393907, -5.160642), (0.000000, 0.000000), (-4.343959, -0.477495), (-4.242136, 3.765135), (-0.011999, 9.585802), (6.129300, 4.842765), (5.009120, -0.428578), (3.322373, -2.714521), (-3.432837, -6.003219), (-1.848160, -4.245271), (-6.459493, 2.067960), (-2.979458, 1.663682), (2.167931, 2.538890), (1.933229, 0.724784), (2.676747, -1.195104), (1.972850, -0.973286), (0.634421, -5.563532), (-4.111582, -2.153282), (-1.210650, -0.496487), (-0.956533, 2.010058), (-1.530863, 4.821041), (3.426158, 2.937706), (4.192265, -1.290817), (1.794367, -5.086899), (-1.679658, -2.065467), (-3.876375, -0.725996), (-3.661741, -1.407879), (-2.084548, 4.497089), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (-2.944585, 3.659593), (5.724320, 3.254458), (6.738144, -0.886663), (5.207028, -5.405132), (-0.430996, -3.544752), (-0.729488, -2.552341), (-3.395002, 2.138602), (-5.044888, 6.862707), (0.543882, 7.311565), (3.704814, 1.310200), (5.050824, -1.433051), (0.395915, -0.258758), (0.116128, -5.785903), (-2.547001, -2.493109), (-3.709285, 2.087872), (-2.038324, 6.180540), (3.659504, 4.629569), (9.955832, 6.914291), (8.954456, -2.873632), (0.453231, -5.569846), (-2.281688, -3.005130), (-6.059662, -2.387279), (-6.319091, 0.696647), (-3.043119, 6.595594), (-0.040363, 4.650494), (8.357180, 3.832532), (0.000000, 0.000000), (5.268385, -7.032218), (-2.388356, -4.671798), (-5.387894, -2.437985), (-7.154739, 1.237124), (-3.472685, 7.093460), (2.278205, 8.289266), (6.777273, -1.145666), (4.976173, -1.693911), (3.300639, -10.385077), (-2.785847, -8.215696), (-2.424021, 0.787790), (-4.730584, 3.362705), (0.806502, 1.267570), (-2.347290, 4.690936), (4.381656, 1.397295), (3.556993, -1.665706), (0.063906, -2.519663), (-1.863072, -6.356658), (-6.042374, 1.798525), (-1.261566, 2.069185), (-0.339713, 4.444746), (4.168523, 6.083779), (3.511291, 1.479556), (4.924921, -3.625070), (1.047986, -0.748240), (-0.521757, -3.347174), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (-2.555775, -0.056708), (-4.434864, 3.641279), (-1.191871, 6.301180), (5.344328, 5.369977), (4.958143, 1.463956), (2.767693, 0.202209), (-1.347542, -6.019910), (-6.315566, -6.563024), (-7.824781, -2.393481), (-4.961745, 3.771390), (-1.291682, 4.547159), (3.464217, 4.949051), (3.720474, 0.531286), (8.871438, -9.455988), (-0.297367, -6.012123), (-5.629203, -3.966360), (-6.067822, 0.560860), (-7.301267, 6.372125), (-0.661476, 11.292875), (5.013375, 2.111665), (1.891930, -1.612417), (4.146815, -2.515435), (-1.189742, -8.288996), (-7.502494, -2.922214), (-4.136703, -0.552042), (-5.161034, 4.624349), (0.000000, 0.000000), (7.068547, 4.214366), (5.499310, -0.571864), (5.430553, -8.277710), (-1.337286, -2.052472), (-3.909487, -3.542063), (-7.585827, 1.517807), (-1.165575, 6.802296), (1.325653, 4.689243), (6.785994, 6.610061), (7.009287, -1.845146), (1.595105, -4.333016), (1.027236, -4.059966), (-2.649374, -2.294841), (-2.938770, 0.416326), (-1.400125, 1.445321), (-0.557074, 3.097444), (4.621887, 3.562785), (6.159728, 1.162290), (1.922460, -4.513289), (-0.914381, -5.364326), (-3.877167, -1.505573), (-3.825034, 0.383488), (-1.132817, 5.862611), (0.891467, 3.690861), (3.261723, 1.454088), (2.126349, -2.312099), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (2.140730, -7.734144), (-3.821711, -6.090192), (-10.620714, -1.393883), (-3.586473, 2.430060), (-1.481701, 8.276475), (-0.316088, 2.656227), (10.349531, 0.352136), (4.330172, -4.532535), (3.253025, -7.510140), (-3.385607, -4.729510), (-2.354036, 0.643038), (-1.938908, 2.842300), (-0.672171, 4.814157), (3.536385, 5.117095), (8.048941, -1.665339), (6.399323, -6.321949), (1.264612, -9.510621), (-2.779011, -5.491943), (-8.447485, -0.784649), (-2.056415, 5.130253), (0.806175, 4.237661), (1.607633, 2.195197), (7.832928, 1.189129), (6.013735, -8.231977), (1.296023, -2.546751), (-3.757336, -6.578231), (0.000000, 0.000000), (-1.205878, 2.284349), (-2.091621, 6.803679), (6.892084, 5.709612), (3.614478, -0.550724), (5.473952, -4.390090), (0.350789, -9.362661), (-6.758287, -1.364459), (-5.063213, 0.575162), (-3.948308, 7.285413), (1.231871, 7.639216), (0.993189, 0.804342), (3.757281, -1.672120), (-0.138878, -2.993900), (2.990594, -5.245501), (-0.587848, 1.878446), (-6.598960, -0.571893), (-2.219543, 2.621767), (1.364518, 3.609193), (2.324264, 1.125707), (6.542206, -1.791211), (1.566010, -3.942953), (-2.365817, -4.761147), (-4.871689, -2.981530), (-2.842743, 2.569794), (-1.285927, 1.129117), (-0.729761, 2.269636), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000)
]

num_groups = len(all_data) // 64  # 假设每组64个子载波

all_processed_data = []

for group in range(num_groups):
    start_idx = group * 64
    end_idx = start_idx + 64
    group_data = all_data[start_idx:end_idx]

    # 转换为复数数组并去除零点
    complex_numbers = [complex(real, imag) for real, imag in group_data if not (real == 0 and imag == 0)]
    if not complex_numbers:
        continue  # 跳过没有数据的组
    data = np.array(complex_numbers).reshape(len(complex_numbers), 1)
    all_processed_data.append(data)

# 运行联合EM算法
h_estimated, t_estimated = em_algorithm(all_processed_data, 10)

# 输出估计结果
print("估计得到的多径幅度:", h_estimated)
print("估计得到的多径时间:", t_estimated)

# 计算主路径的相位
main_path_index = np.argmax(np.abs(h_estimated))
main_path_gain = h_estimated[main_path_index]
main_path_phase = np.angle(main_path_gain)
print("主路径的相位:", main_path_phase)