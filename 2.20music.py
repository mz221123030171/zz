import numpy as np
import matplotlib.pyplot as plt




# MUSIC算法实现
def music_algorithm(data, num_taps, num_snapshot):
    num_subcarriers = data.shape[0]

    # 计算协方差矩阵
    R = np.zeros((num_subcarriers, num_subcarriers), dtype=complex)
    for i in range(num_snapshots):
        R += np.outer(data[:, i], np.conj(data[:, i]).T)
    R /= num_snapshots

    # 特征值分解
    eigenvalues, eigenvectors = np.linalg.eig(R)

    # 排序特征值和特征向量
    sorted_indices = np.argsort(eigenvalues)[::-1]
    eigenvalues = eigenvalues[sorted_indices]
    eigenvectors = eigenvectors[:, sorted_indices]

    # 分离信号子空间和噪声子空间
    signal_subspace = eigenvectors[:, :num_taps]
    noise_subspace = eigenvectors[:, num_taps:]

    # MUSIC谱
    music_spectrum = np.zeros(num_subcarriers, dtype=float)
    for i in range(num_subcarriers):
        a = np.exp(-1j * 2 * np.pi * np.arange(num_subcarriers) * i / num_subcarriers)
        music_spectrum[i] = 1 / np.linalg.norm(noise_subspace.conj().T @ a) ** 2

    # 找到峰值
    peaks = np.argsort(music_spectrum)[-num_taps:]
    t_estimated = peaks / num_subcarriers

    # 估计幅度
    h_estimated = np.zeros(num_taps, dtype=complex)
    for i in range(num_taps):
        h_estimated[i] = np.sum(data[:, 0] * np.exp(-1j * 2 * np.pi * np.arange(num_subcarriers) * t_estimated[i]))

    return h_estimated, t_estimated, music_spectrum


'''# 使用MUSIC算法处理信道响应数据
numbers_str = """
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.568228 2.757300 0.698775 3.472677 0.734426 2.941216 0.969538 2.931718 1.800521 2.380464 1.654377 2.808142 2.193567 1.197482 2.829751 2.427745 2.144656 2.175441 2.912757 1.774284 2.957046 1.783900 2.707320 1.106679 2.848870 1.157292 3.910219 0.074898 4.056129 -0.607649 3.132771 0.104632 2.443525 -0.712993 3.159709 -0.328996 3.530627 -0.996155 1.844237 -1.865634 3.279615 -2.574146 2.900178 -0.927349 2.181734 -2.417990 2.635881 -2.023716 2.562145 -3.034913 2.130831 -3.165467 0.000000 0.000000 0.705336 -3.178614 0.428695 -3.904384 1.161510 -2.914215 0.304238 -2.510726 -0.307167 -3.523819 -0.958499 -1.863360 -1.061720 -3.008478 -0.770754 -2.815255 -1.302912 -3.158412 -0.879295 -2.228404 -1.801843 -2.747732 -2.201680 -2.312284 -1.663000 -1.772782 -2.950006 -3.006545 -3.045053 -2.023299 -3.257232 -2.138626 -2.920811 -1.296115 -3.060702 -1.135716 -2.624388 -0.177991 -2.469200 0.053379 -2.900146 -0.530035 -3.274527 -0.673345 -3.369627 0.691406 -3.031503 0.819476 -2.428913 0.839153 -3.725126 2.385511 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000
"""

# 将字符串按行分割并去除多余的空格和换行符
numbers_str = numbers_str.replace('\n', ' ').strip()

# 使用split()方法根据空格分割字符串，得到一个包含所有数字的列表
numbers = [float(num) for num in numbers_str.split()]

# 将数字转换成复数
complex_numbers = [complex(numbers[i], numbers[i + 1]) for i in range(0, len(numbers) - 1, 2)]'''
data = [
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.407845, 4.082422), (4.014088, 3.004378), (10.602316, -4.284601), (2.320276, -3.616815), (-1.114925, -7.139877), (-0.954480, -2.376929), (-7.162391, 2.594994), (-3.289485, 7.718773), (3.773490, 6.471739), (6.096123, 1.899204), (5.499163, -1.751755), (0.849766, -2.204436), (-0.677962, -3.861882), (-14.277596, -4.462277), (-7.979001, 1.678429), (-0.981183, 5.036925), (1.026999, 3.031790), (6.426892, 3.384058), (11.416090, -5.960452), (-0.257621, -5.535560), (-1.967637, -5.114631), (-7.170825, -3.117266), (-7.423131, 3.403350), (-2.735023, 5.837963), (2.744296, 3.822786), (4.741892, 3.233120), (0.000000, 0.000000), (1.383814, -8.784586), (-2.447885, -6.603639), (-8.369374, -2.947669), (-7.069901, 3.175249), (-3.816792, 4.697056), (2.644261, 6.140457), (6.719226, -1.931009), (6.881330, -3.350366), (3.227600, -3.683879), (-4.737039, -4.615370), (-3.007192, -0.175310), (-1.654852, -0.179895), (0.344973, 3.122655), (1.086329, 4.549740), (3.428270, 2.289448), (1.249043, -0.284607), (0.365450, -5.273841), (-3.966265, -3.385479), (-4.674198, 0.621399), (-5.794177, 5.469763), (0.343149, 4.384173), (2.079968, 5.040246), (4.480678, -0.957384), (-0.254730, -2.683819), (1.040562, -2.666174), (-3.567689, -1.540266), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (-8.097754, 1.376155), (-3.510232, 2.567855), (2.288605, 10.455429), (3.055874, 3.084967), (6.042990, -1.081506), (2.739577, -0.830385), (-1.985527, -9.353421), (-7.176399, -3.406033), (-7.443576, 0.137597), (-3.053854, 4.702940), (2.787637, 3.604236), (3.215640, 2.647967), (3.842637, -1.424683), (4.235678, -6.440058), (-2.442795, -7.183108), (-3.663235, -2.625823), (-5.147391, 3.948605), (-5.433411, 11.048642), (3.726576, 8.296859), (5.482227, 0.241377), (6.153845, -2.364485), (1.143834, -6.527600), (-1.862252, -5.070584), (-7.092742, -1.720987), (-3.637824, 2.918155), (-3.792636, 7.498147), (0.000000, 0.000000), (1.730902, 2.821868), (9.474378, -6.320644), (2.434913, -11.365214), (-4.257691, -7.769053), (-6.751787, -2.886895), (-3.221125, 1.535628), (0.991834, 6.833742), (3.783876, 7.608405), (7.433539, 1.371405), (3.591478, -1.386046), (-0.141212, -2.631595), (-1.654592, -0.797792), (-1.221230, 2.260608), (-2.936032, 1.120678), (-2.898262, 5.033156), (4.301390, 6.152434), (5.879400, 0.741321), (1.021682, -0.443180), (1.053167, -3.545872), (-2.038405, -3.053873), (-4.229783, -0.085388), (-3.707831, 4.220292), (-1.231560, 4.546891), (2.322666, 1.829025), (2.775810, 0.049574), (2.079092, -1.088105), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (-0.704402, -5.662627), (-1.790955, -0.049195), (-9.694793, 2.448999), (-2.315897, 5.103513), (1.007986, 6.502104), (0.853330, 2.471430), (2.766929, -2.222241), (5.176397, -8.059201), (-0.173906, -7.732266), (-3.738453, -3.189083), (-7.463548, 2.091270), (-1.390365, 1.581827), (1.514919, 3.064972), (9.628608, 5.290894), (3.927109, -1.316942), (1.464799, -4.067282), (-2.299522, -8.840732), (-11.350558, -6.235073), (-10.077860, 1.663389), (-0.321506, 5.481086), (2.378016, 7.050070), (3.911603, 2.328717), (2.532932, -2.217782), (1.525011, -7.953297), (-2.451911, -3.585191), (-7.347487, -1.962179), (0.000000, 0.000000), (-4.548593, 8.194358), (2.421524, 4.643125), (4.866636, 1.267781), (6.790350, -2.611241), (2.105953, -7.167416), (-2.214555, -8.054501), (-6.779926, 1.418374), (-7.122698, 3.831383), (-0.104873, 7.446944), (1.684146, 5.268875), (6.217278, 0.842525), (2.379753, -2.232061), (-0.419113, -1.787390), (-1.535246, -2.631710), (-4.130533, -2.545471), (-4.257875, 1.767488), (-1.326663, 4.045141), (0.779296, 2.736319), (6.925214, 3.567090), (5.444922, -2.263326), (0.227287, -4.397873), (-4.512689, -5.185324), (-2.538953, 0.749749), (-1.622172, 0.622470), (0.483684, 2.882578), (2.845966, 1.390596), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
(0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (7.201354, 4.213335), (7.196018, -2.589945), (5.432011, -13.137761), (-2.722875, -6.913155), (-5.500750, -4.028433), (-2.435718, -0.778042), (-1.352966, 9.224734), (2.697367, 5.641242), (5.454648, 2.996875), (5.111868, -2.889031), (1.640455, -3.103754), (-2.057982, -4.511129), (-5.644073, -0.897505), (-2.767730, 1.795063), (-1.016735, 3.998781), (6.012923, 10.757964), (6.518017, 2.261372), (5.767557, -2.877136), (2.832100, -8.606063), (-4.598314, -3.251776), (-6.234882, 0.354413), (-7.081993, 5.656694), (-0.722202, 6.408915), (5.686115, 5.274381), (6.187773, 0.332044), (5.258820, -5.392730), (0.000000, 0.000000), (-2.878400, -4.730124), (-5.341249, -2.205183), (-4.943366, 1.540902), (-0.572552, 6.780281), (1.848973, 3.150888), (7.656054, -0.280696), (2.650479, -6.445966), (-0.034833, -7.080756), (-1.975792, -1.220242), (-4.538655, 0.199780), (-2.197356, 3.836947), (-0.842855, 1.853480), (2.119257, 1.796879), (0.231458, -2.081625), (2.850996, -4.175807), (3.248595, -2.173945), (-4.796553, -4.267629), (-4.057283, -0.858647), (-3.913520, 4.307941), (1.107079, 4.897689), (3.570245, 2.483782), (3.310890, 0.768368), (2.231577, -3.131764), (-0.917212, -3.035833), (-2.575939, -1.398935), (-1.996444, -1.445434), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000), (0.000000, 0.000000),
]
complex_numbers = [complex(r, i) for r, i in data if (r, i) != (0, 0)]

# 确定参数
num_snapshots = 4 # 设置快照数量
num_subcarriers = len(complex_numbers) // num_snapshots  # 计算子载波数量

# 重组数据为（子载波数 × 快照数）
data = np.array(complex_numbers).reshape(num_subcarriers, num_snapshots)

# 使用MUSIC算法估计多径参数
h_estimated, t_estimated, music_spectrum = music_algorithm(data, 11,num_snapshots)

# 输出结果
print("估计得到的多径幅度:", h_estimated)
print("估计得到的多径时间:", t_estimated)
main_path_index = np.argmax(np.abs(h_estimated))  # 找到幅度最大的路径索引
main_path_gain = h_estimated[main_path_index]  # 获取主路径的复数增益
main_path_phase = np.angle(main_path_gain)  # 计算主路径的相位

print("主路径的相位:", main_path_phase)
# 绘制MUSIC谱
plt.plot(np.arange(len(music_spectrum)), music_spectrum)
plt.title('MUSIC Spectrum')
plt.xlabel('Subcarrier Index')
plt.ylabel('Spectrum')
plt.show()

