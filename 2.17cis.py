import numpy as np

# 给定的 ofdm_sync_chan_taps 数据
ofdm_sync_chan_taps = [
(0,0), (0,0), (0,0), (0,0), (0,0), (0,0), (2.60532,-1.78753), (2.65281,-1.98184), (2.33129,-2.91552), (0.979422,-2.62354), (0.654734,-2.85655), (0.676045,-3.63916), (-0.9464,-3.495), (-0.745116,-2.68377), (-1.8431,-3.14608), (-2.08351,-2.70971), (-2.93183,-1.97309), (-4.07009,-1.53609), (-3.16736,-0.719674), (-3.41939,-0.929204), (-3.06776,-0.471387), (-3.08881,0.647437), (-3.22765,1.2547), (-2.52613,2.22722), (-2.04866,1.84886), (-1.70065,2.81996), (-0.736655,4.30187), (-0.449391,3.37543), (1.26911,3.58934), (1.17999,3.4703), (1.09766,3.01351), (1.22636,1.70834), (0,0), (2.08969,0.669849), (2.92051,0.717274), (2.50719,1.27573), (2.21335,-0.264154), (1.9549,-0.210829), (2.70248,-1.74001), (2.69365,-1.79387), (2.35312,-2.44654), (1.0411,-2.7145), (1.27719,-2.9584), (0.638515,-2.60009), (0.254448,-3.74282), (-0.119721,-2.97455), (-1.60572,-2.1773), (-2.12822,-2.96148), (-2.89357,-1.74984), (-2.78754,-1.87906), (-2.73489,-1.55183), (-2.50308,0.106214), (-2.47385,-0.0584881), (-3.50327,0.248571), (-3.53257,1.20056), (-2.03856,2.21422), (-2.12527,1.99184), (-1.44514,1.87757), (-0.578599,3.03184), (0,0), (0,0), (0,0), (0,0), (0,0)
]

# 提取实部和虚部，构建复数形式的频域信道响应
h_freq = np.array([complex(re, im) for re, im in ofdm_sync_chan_taps])
# 对频域响应进行 IFFT，得到时域脉冲响应
h_time = np.fft.ifft(h_freq)

# 取绝对值，方便观察
h_time_abs = np.abs(h_time)
from scipy.signal import find_peaks

# 找到时域脉冲响应的峰值
peaks, _ = find_peaks(h_time_abs, height=0.1 * np.max(h_time_abs))  # 高度阈值设为最大值的 10%

# 输出多径分量的延迟和幅度
multipath_delays = peaks  # 延迟（采样点索引）
multipath_amplitudes = h_time_abs[peaks]  # 幅度

print("Multipath Delays (samples):", multipath_delays)
print("Multipath Amplitudes:", multipath_amplitudes)
import matplotlib.pyplot as plt

# 绘制时域脉冲响应
plt.plot(h_time_abs, label="Time-domain CIR")
plt.scatter(peaks, h_time_abs[peaks], color="red", label="Multipath Peaks")
plt.title("Time-domain Channel Impulse Response (CIR)")
plt.xlabel("Sample Index")
plt.ylabel("Amplitude")
plt.legend()
plt.show()